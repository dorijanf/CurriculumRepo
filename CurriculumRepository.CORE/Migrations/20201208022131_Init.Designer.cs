// <auto-generated />
using System;
using CurriculumRepository.CORE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CurriculumRepository.CORE.Migrations
{
    [DbContext(typeof(CurriculumDatabaseContext))]
    [Migration("20201208022131_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("CurriculumRepository.API.Models.Entities.Ls", b =>
                {
                    b.Property<int>("Idls")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLS")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("LearningOutcomeCtid")
                        .HasColumnType("int")
                        .HasColumnName("LearningOutcomeCTID");

                    b.Property<int>("LearningOutcomeSubjectId")
                        .HasColumnType("int")
                        .HasColumnName("LearningOutcomeSubjectID");

                    b.Property<string>("Lsacknowledgment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LSAcknowledgment");

                    b.Property<string>("Lsdescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LSDescription");

                    b.Property<TimeSpan>("Lsduration")
                        .HasColumnType("time")
                        .HasColumnName("LSDuration");

                    b.Property<int?>("Lsgrade")
                        .HasColumnType("int")
                        .HasColumnName("LSGrade");

                    b.Property<string>("Lsname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LSName");

                    b.Property<int>("LstypeId")
                        .HasColumnType("int")
                        .HasColumnName("LSTypeID");

                    b.Property<int>("TeachingSubjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("Idls")
                        .HasName("PK_ScenarijUcenja");

                    b.HasIndex("LearningOutcomeCtid");

                    b.HasIndex("LearningOutcomeSubjectId");

                    b.HasIndex("LstypeId");

                    b.HasIndex("TeachingSubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("LS");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.Keyword", b =>
                {
                    b.Property<int>("Idkeyword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDKeyword")
                        .UseIdentityColumn();

                    b.Property<string>("KeywordName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Idkeyword")
                        .HasName("PK_KljucniPojam");

                    b.ToTable("Keyword");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.La", b =>
                {
                    b.Property<int>("Idla")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLA")
                        .UseIdentityColumn();

                    b.Property<int>("CooperationId")
                        .HasColumnType("int")
                        .HasColumnName("CooperationID");

                    b.Property<bool>("DigitalTechnology")
                        .HasColumnType("bit");

                    b.Property<string>("Laacknowledgment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LAAcknowledgment");

                    b.Property<string>("Ladescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LADescription");

                    b.Property<TimeSpan>("Laduration")
                        .HasColumnType("time")
                        .HasColumnName("LADuration");

                    b.Property<byte>("Lagrade")
                        .HasColumnType("tinyint")
                        .HasColumnName("LAGrade");

                    b.Property<string>("Laname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("LAName");

                    b.Property<int>("LastrategiesId")
                        .HasColumnType("int")
                        .HasColumnName("LAStrategiesID");

                    b.Property<int>("LatypeId")
                        .HasColumnType("int")
                        .HasColumnName("LATypeID");

                    b.Property<int>("Lsid")
                        .HasColumnType("int")
                        .HasColumnName("LSID");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<int?>("PerformanceId")
                        .HasColumnType("int")
                        .HasColumnName("PerformanceID");

                    b.HasKey("Idla")
                        .HasName("PK_Aktivnost");

                    b.HasIndex("CooperationId");

                    b.HasIndex("LatypeId");

                    b.HasIndex("PerformanceId");

                    b.ToTable("LA");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.Lacollaboration", b =>
                {
                    b.Property<int>("Idcollaboration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCollaboration")
                        .UseIdentityColumn();

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CollaborationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.HasKey("Idcollaboration")
                        .HasName("PK_RazinaSuradnje");

                    b.ToTable("LACollaboration");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.Laperformance", b =>
                {
                    b.Property<int>("Idperformance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPerformance")
                        .UseIdentityColumn();

                    b.Property<string>("PerformanceName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Idperformance");

                    b.ToTable("LAPerformance");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.LastrategyMethod", b =>
                {
                    b.Property<int>("IdlastrategyMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLAStrategyMethod")
                        .UseIdentityColumn();

                    b.Property<int>("Laid")
                        .HasColumnType("int")
                        .HasColumnName("LAID");

                    b.Property<int>("StrategyMethodId")
                        .HasColumnType("int")
                        .HasColumnName("StrategyMethodID");

                    b.HasKey("IdlastrategyMethod");

                    b.HasIndex("Laid");

                    b.HasIndex("StrategyMethodId");

                    b.ToTable("LAStrategyMethod");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.LateachingAid", b =>
                {
                    b.Property<int>("IdlateachingAid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLATeachingAid")
                        .UseIdentityColumn();

                    b.Property<int>("Laid")
                        .HasColumnType("int")
                        .HasColumnName("LAID");

                    b.Property<bool?>("LateachingAidUser")
                        .HasColumnType("bit")
                        .HasColumnName("LATeachingAidUser")
                        .HasComment("Atribut definira hoće li se nastavnim sredstvom služiti nastavnik ili učenik. Npr. 0 za nastavnika, a 1 za učenika.");

                    b.Property<int>("TeachingAidId")
                        .HasColumnType("int")
                        .HasColumnName("TeachingAidID");

                    b.HasKey("IdlateachingAid");

                    b.HasIndex("Laid");

                    b.HasIndex("TeachingAidId");

                    b.ToTable("LATeachingAid");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.Latype", b =>
                {
                    b.Property<int>("Idlatype")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLAType")
                        .UseIdentityColumn();

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LatypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LATypeName");

                    b.HasKey("Idlatype")
                        .HasName("PK_NacinIzvodenja");

                    b.ToTable("LAType");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.LearningOutcomeCt", b =>
                {
                    b.Property<int>("IdlearningOutcomeCt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLearningOutcomeCT")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LearningOutcomeCtstatement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LearningOutcomeCTStatement");

                    b.HasKey("IdlearningOutcomeCt")
                        .HasName("PK_IshodUcenjaRR");

                    b.ToTable("LearningOutcomeCT");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.LearningOutcomeSubject", b =>
                {
                    b.Property<int>("IdlearningOutcomeSubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLearningOutcomeSubject")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LearningOutcomeSubjectStatement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdlearningOutcomeSubject")
                        .HasName("PK_IshodUcenjaPredmet");

                    b.ToTable("LearningOutcomeSubject");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.LscorrelationInterdisciplinarity", b =>
                {
                    b.Property<int>("IdlscorrelationInterdisciplinarity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLSCorrelationInterdisciplinarity")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Lsid")
                        .HasColumnType("int")
                        .HasColumnName("LSID");

                    b.Property<int>("TeachingSubjectId")
                        .HasColumnType("int")
                        .HasColumnName("TeachingSubjectID");

                    b.HasKey("IdlscorrelationInterdisciplinarity");

                    b.HasIndex("Lsid");

                    b.HasIndex("TeachingSubjectId");

                    b.ToTable("LSCorrelationInterdisciplinarity");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.Lskeyword", b =>
                {
                    b.Property<int>("Idlskeyword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLSKEYWORD")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Keywordid")
                        .HasColumnType("int")
                        .HasColumnName("KEYWORDID");

                    b.Property<int>("Lsid")
                        .HasColumnType("int")
                        .HasColumnName("LSID");

                    b.HasKey("Idlskeyword");

                    b.HasIndex("Keywordid");

                    b.HasIndex("Lsid");

                    b.ToTable("LSKEYWORD");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.Lsla", b =>
                {
                    b.Property<int>("Idlsla")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLSLA")
                        .UseIdentityColumn();

                    b.Property<int>("Laid")
                        .HasColumnType("int")
                        .HasColumnName("LAID");

                    b.Property<int>("Lsid")
                        .HasColumnType("int")
                        .HasColumnName("LSID");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("Idlsla");

                    b.HasIndex("Laid");

                    b.HasIndex("Lsid");

                    b.ToTable("LSLA");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.Lstype", b =>
                {
                    b.Property<int>("Idlstype")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLSType")
                        .UseIdentityColumn();

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LstypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LSTypeName");

                    b.HasKey("Idlstype")
                        .HasName("PK_VrstaScenarija");

                    b.ToTable("LSType");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.StrategyMethod", b =>
                {
                    b.Property<int>("IdstrategyMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDStrategyMethod")
                        .UseIdentityColumn();

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("StrategyMethodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("StrategyMethodPicture")
                        .HasColumnType("image");

                    b.Property<int>("StrategyMethodTypeId")
                        .HasColumnType("int")
                        .HasColumnName("StrategyMethodTypeID");

                    b.HasKey("IdstrategyMethod")
                        .HasName("PK_StrategijeIMetode");

                    b.HasIndex("StrategyMethodTypeId");

                    b.ToTable("StrategyMethod");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.StrategyMethodType", b =>
                {
                    b.Property<int>("IdstrategyMethodType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDStrategyMethodType")
                        .UseIdentityColumn();

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("StrategyMethodTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdstrategyMethodType")
                        .HasName("PK_VrstaStrategijeIMetode");

                    b.ToTable("StrategyMethodType");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.TeachingAid", b =>
                {
                    b.Property<int>("IdteachingAid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTeachingAid")
                        .UseIdentityColumn();

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("TeachingAidName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("TeachingAidPicture")
                        .HasColumnType("image");

                    b.Property<int>("TeachingAidTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TeachingAidTypeID");

                    b.HasKey("IdteachingAid");

                    b.HasIndex("TeachingAidTypeId");

                    b.ToTable("TeachingAid");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.TeachingAidType", b =>
                {
                    b.Property<int>("IdteachingAidType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTeachingAidType")
                        .UseIdentityColumn();

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("TeachingAidTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdteachingAidType");

                    b.ToTable("TeachingAidType");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.TeachingSubject", b =>
                {
                    b.Property<int>("IdteachingSubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTeachingSubject")
                        .UseIdentityColumn();

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TeachingSubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdteachingSubject")
                        .HasName("PK_NastavniPredmet");

                    b.ToTable("TeachingSubject");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CurriculumRepository.API.Models.Entities.Ls", b =>
                {
                    b.HasOne("CurriculumRepository.CORE.Entities.LearningOutcomeCt", "LearningOutcomeCt")
                        .WithMany("Ls")
                        .HasForeignKey("LearningOutcomeCtid")
                        .HasConstraintName("FK_LS_LearningOutcomeCTID")
                        .IsRequired();

                    b.HasOne("CurriculumRepository.CORE.Entities.LearningOutcomeSubject", "LearningOutcomeSubject")
                        .WithMany("Ls")
                        .HasForeignKey("LearningOutcomeSubjectId")
                        .HasConstraintName("FK_LS_LearningOutcomeSubjectID")
                        .IsRequired();

                    b.HasOne("CurriculumRepository.CORE.Entities.Lstype", "Lstype")
                        .WithMany("Ls")
                        .HasForeignKey("LstypeId")
                        .HasConstraintName("FK_LS_LSType")
                        .IsRequired();

                    b.HasOne("CurriculumRepository.CORE.Entities.TeachingSubject", "TeachingSubject")
                        .WithMany("Ls")
                        .HasForeignKey("TeachingSubjectId")
                        .HasConstraintName("FK_LS_TeachingSubjectID")
                        .IsRequired();

                    b.HasOne("CurriculumRepository.CORE.Entities.User", "User")
                        .WithMany("Ls")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_LS_UserID");

                    b.Navigation("LearningOutcomeCt");

                    b.Navigation("LearningOutcomeSubject");

                    b.Navigation("Lstype");

                    b.Navigation("TeachingSubject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.La", b =>
                {
                    b.HasOne("CurriculumRepository.CORE.Entities.Lacollaboration", "Cooperation")
                        .WithMany("La")
                        .HasForeignKey("CooperationId")
                        .HasConstraintName("FK_LA_LACooperation")
                        .IsRequired();

                    b.HasOne("CurriculumRepository.CORE.Entities.Latype", "Latype")
                        .WithMany("La")
                        .HasForeignKey("LatypeId")
                        .HasConstraintName("FK_LA_LAType")
                        .IsRequired();

                    b.HasOne("CurriculumRepository.CORE.Entities.Laperformance", "Performance")
                        .WithMany("La")
                        .HasForeignKey("PerformanceId")
                        .HasConstraintName("FK_LA_LAPerformance");

                    b.Navigation("Cooperation");

                    b.Navigation("Latype");

                    b.Navigation("Performance");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.LastrategyMethod", b =>
                {
                    b.HasOne("CurriculumRepository.CORE.Entities.La", "La")
                        .WithMany("LastrategyMethod")
                        .HasForeignKey("Laid")
                        .HasConstraintName("FK_LAStrategyMethod_LA")
                        .IsRequired();

                    b.HasOne("CurriculumRepository.CORE.Entities.StrategyMethod", "StrategyMethod")
                        .WithMany("LastrategyMethod")
                        .HasForeignKey("StrategyMethodId")
                        .HasConstraintName("FK_LAStrategyMethod_StrategyMethod")
                        .IsRequired();

                    b.Navigation("La");

                    b.Navigation("StrategyMethod");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.LateachingAid", b =>
                {
                    b.HasOne("CurriculumRepository.CORE.Entities.La", "La")
                        .WithMany("LateachingAid")
                        .HasForeignKey("Laid")
                        .HasConstraintName("FK_LATeachingAid_LA")
                        .IsRequired();

                    b.HasOne("CurriculumRepository.CORE.Entities.TeachingAid", "TeachingAid")
                        .WithMany("LateachingAid")
                        .HasForeignKey("TeachingAidId")
                        .HasConstraintName("FK_LATeachingAid_TeachingAid")
                        .IsRequired();

                    b.Navigation("La");

                    b.Navigation("TeachingAid");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.LscorrelationInterdisciplinarity", b =>
                {
                    b.HasOne("CurriculumRepository.API.Models.Entities.Ls", "Ls")
                        .WithMany("LscorrelationInterdisciplinarity")
                        .HasForeignKey("Lsid")
                        .HasConstraintName("FK_LSCorrelationInterdisciplinarity_LS")
                        .IsRequired();

                    b.HasOne("CurriculumRepository.CORE.Entities.TeachingSubject", "TeachingSubject")
                        .WithMany("LscorrelationInterdisciplinarity")
                        .HasForeignKey("TeachingSubjectId")
                        .HasConstraintName("FK_LSCorrelationInterdisciplinarity_TeachingSubject")
                        .IsRequired();

                    b.Navigation("Ls");

                    b.Navigation("TeachingSubject");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.Lskeyword", b =>
                {
                    b.HasOne("CurriculumRepository.CORE.Entities.Keyword", "Keyword")
                        .WithMany("Lskeyword")
                        .HasForeignKey("Keywordid")
                        .HasConstraintName("FK_LSKEYWORD_KEYWORD")
                        .IsRequired();

                    b.HasOne("CurriculumRepository.API.Models.Entities.Ls", "Ls")
                        .WithMany("Lskeyword")
                        .HasForeignKey("Lsid")
                        .HasConstraintName("FK_LSKEYWORD_LS")
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("Ls");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.Lsla", b =>
                {
                    b.HasOne("CurriculumRepository.CORE.Entities.La", "La")
                        .WithMany("Lsla")
                        .HasForeignKey("Laid")
                        .HasConstraintName("FK_LSLA_LA")
                        .IsRequired();

                    b.HasOne("CurriculumRepository.API.Models.Entities.Ls", "Ls")
                        .WithMany("Lsla")
                        .HasForeignKey("Lsid")
                        .HasConstraintName("FK_LSLA_LS")
                        .IsRequired();

                    b.Navigation("La");

                    b.Navigation("Ls");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.StrategyMethod", b =>
                {
                    b.HasOne("CurriculumRepository.CORE.Entities.StrategyMethodType", "StrategyMethodType")
                        .WithMany("StrategyMethod")
                        .HasForeignKey("StrategyMethodTypeId")
                        .HasConstraintName("FK_StrategyMethod_StrategyMethodType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrategyMethodType");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.TeachingAid", b =>
                {
                    b.HasOne("CurriculumRepository.CORE.Entities.TeachingAidType", "TeachingAidType")
                        .WithMany("TeachingAid")
                        .HasForeignKey("TeachingAidTypeId")
                        .HasConstraintName("FK_TeachingAid_TeachingAidType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeachingAidType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CurriculumRepository.CORE.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CurriculumRepository.CORE.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CurriculumRepository.CORE.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CurriculumRepository.CORE.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CurriculumRepository.API.Models.Entities.Ls", b =>
                {
                    b.Navigation("LscorrelationInterdisciplinarity");

                    b.Navigation("Lskeyword");

                    b.Navigation("Lsla");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.Keyword", b =>
                {
                    b.Navigation("Lskeyword");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.La", b =>
                {
                    b.Navigation("LastrategyMethod");

                    b.Navigation("LateachingAid");

                    b.Navigation("Lsla");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.Lacollaboration", b =>
                {
                    b.Navigation("La");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.Laperformance", b =>
                {
                    b.Navigation("La");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.Latype", b =>
                {
                    b.Navigation("La");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.LearningOutcomeCt", b =>
                {
                    b.Navigation("Ls");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.LearningOutcomeSubject", b =>
                {
                    b.Navigation("Ls");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.Lstype", b =>
                {
                    b.Navigation("Ls");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.StrategyMethod", b =>
                {
                    b.Navigation("LastrategyMethod");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.StrategyMethodType", b =>
                {
                    b.Navigation("StrategyMethod");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.TeachingAid", b =>
                {
                    b.Navigation("LateachingAid");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.TeachingAidType", b =>
                {
                    b.Navigation("TeachingAid");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.TeachingSubject", b =>
                {
                    b.Navigation("Ls");

                    b.Navigation("LscorrelationInterdisciplinarity");
                });

            modelBuilder.Entity("CurriculumRepository.CORE.Entities.User", b =>
                {
                    b.Navigation("Ls");
                });
#pragma warning restore 612, 618
        }
    }
}
